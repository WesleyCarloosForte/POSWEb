@using Newtonsoft.Json;
@using SharedProject.Models;
@using System.Text.Json;
@inject IJSRuntime js
@inject SweetAlertService swl

<div style="display: @(showModal ? "block" : "none"); position: fixed; z-index: 1; left: 0; top: 0; width: 100%; height: 100%; overflow: auto; background-color: rgba(0, 0, 0, 0.4);">
    <div style="background-color: #fefefe; margin: 15% auto; padding: 20px; border: 1px solid #888; width: 80%;">
        <div style="display: flex; justify-content: space-between; align-items: center;">
            <h5 style="margin: 0;">Lista de Nombres</h5>
            <button type="button" style="background: none; border: none; cursor: pointer; font-size: 24px; font-weight: bold; color: #000;" @onclick="HideModal">&times;</button>
        </div>
        <div>
            <h3>Cliente</h3>

            <div class="input-group my-2 align-items-center">
                <div class="input-group-prepend">
                    <span class="input-group-text" style="margin-right: 5px;"><i class="fas fa-search"></i></span>
                </div>
                <input type="text" class="form-control px-2" placeholder="Buscar" @bind="@txt" />
                <div class="input-group-append" style="margin-left: 5px;">
                    <button class="btn btn-primary ml-2" type="button" @onclick="(() => Buscar(txt))">Buscar</button>
                </div>
            </div>

            @if (Clientes == null)
            {
                <text>Cargando...</text>
            }
            else if (Clientes.Length == 0)
            {
                <text>No hay categorías en la base de datos.</text>
            }
            else
            {
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th hidden>Id</th>
                            <th>Nombre</th>
                            <th>Documento</th>
                            <th>Tipo de Documento</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var Cliente in Clientes)
                        {
                            <tr>
                                <td hidden>@Cliente.Id</td>
                                <td>@Cliente.DatosGenerales.Nombre</td>
                                <td>@Cliente.DatosGenerales.NumeroDocumento</td>
                                <td>@Cliente.DatosGenerales.Documento.Descripcion</td>
                                <td>
                                    <button class="btn btn-success" type="button" @onclick="(()=>SelectName(Cliente))">
                                        <i class="fas fa-edit"></i>
                                    </button>

                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    </div>
</div>


<div class="container">
    <div class="row">
        <div class="col-md-8">
            <!-- Crea la interfaz de usuario -->
            <div class="container">
                <h3>Frente de Caja</h3>

                <h5>Buscar por código de barras:</h5>
                <div class="input-group">
                    <input type="text" class="form-control" @bind="codigoBarras" id="codigoBarrasInput" placeholder="Ingrese el código de barras" @oninput="ActualizarCampo" @onkeydown="@(async (e) => { if (e.Key == "Enter") {  await Buscar(); } })" />
                </div>


                @if (productosEncontrados != null && productosEncontrados.Any())
                {
                    <div class="mt-4">
                        <table class="table">
                            <thead>
                                <tr>
                                    <th></th>
                                    <th>Código</th>
                                    <th>Producto</th>
                                    <th>Prec Unit</th>
                                    <th>Cantidad</th>
                                    <th>Total</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var producto in productosEncontrados)
                                {
                                    <tr>

                                        <td>
                                            <button class="btn btn-danger" @onclick="(() => EliminarProducto(producto.CodigoBarras))"><i class="fas fa-trash"></i> </button>
                                            <button class="btn btn-primary" @onclick="(() => SumarCantidad(producto))">+</button>
                                            <button class="btn btn-primary" @onclick="(() => RestarCantidad(producto))">-</button>
                                        </td>
                                        <td>@producto.CodigoBarras</td>
                                        <td>@producto.Descripcion</td>
                                        <td>@producto.PrecioVenta</td>
                                        <td>@producto.Cantidad</td>

                                        <td>@CalcularTotal(producto.Cantidad,producto.PrecioVenta)</td>

                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
                else if (codigoBarrasEncontrado && !productoEncontradoEncontrado)
                {
                    <div class="mt-4">
                        <p class="text-danger">Seleccione un producto....</p>
                    </div>
                }
            </div>

        </div>
        @if (productosEncontrados != null && productosEncontrados.Any())
        {
        <div class="col-md-4">
            <!-- Crea la interfaz de usuario -->
            <!-- Card principal -->
            <div class="card">
                <div class="card-body">
                    <!-- Card de Cliente -->
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">Cliente</h5>
                            <div class="input-group">
                                    <input type="text" class="form-control" placeholder="Ingrese el documento" @oninput="ActualizarCampoCliente" @onkeydown="HandleKeyDownCliente" @bind="documentoBusqueda" />
                                    <button class="btn btn-primary ml-2" type="button" @onclick="(() => ShowNameList())">...</button>
                                </div>

                            @if (clienteSeleccionado != null)
                            {
                                <div class="form-group mt-3">
                                    <label for="nombreCliente">Nombre:</label>
                                    <input type="text" class="form-control" id="nombreCliente" value="@clienteSeleccionado.DatosGenerales.Nombre" readonly />
                                </div>

                                <div class="form-group">
                                    <label for="documentoCliente">Documento:</label>
                                    <input type="text" class="form-control" id="documentoCliente" value="@clienteSeleccionado.DatosGenerales.NumeroDocumento" readonly />
                                </div>
                            }
                        </div>
                    </div>

                    <!-- Card de Comprobante -->
                    <!-- Card de Comprobante -->
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">Comprobante</h5>
                            <div class="input-group">
                                <select class="form-control" @bind="comprobanteSeleccionado">
                                    @foreach (var comprobante in listaComprobantes)
                                    {
                                        <option value="@comprobante.Id" selected="@comprobante.Id == comprobanteSeleccionado">@comprobante.Descripcion</option>
                                    }
                                </select>
                            </div>
                        </div>
                    </div>

                    <!-- Card de Pago -->
                    <!-- Card de Pago y Totales -->
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">Pago y Totales</h5>

                            <div class="form-group">
                                <label for="inputPago">Pago</label>
                                    <input type="number" class="form-control" id="inputPago" @oninput="ActualizarCampoPago" @onkeydown="HandleKeyDown" placeholder="Ingrese el valor del pago" @bind="valorPago" />
                            </div>

                            <div class="form-group">
                                <label>Total</label>
                                <label>@GetTotalSinIVa(TotalIVa,totalGeneralVenta).ToString("N2") PYG</label>
                            </div>

                            <div class="form-group">
                                <label>IVA</label>
                                <label>@TotalIVa.ToString("N2") PYG</label>
                            </div>

                            <div class="form-group">
                                <label>Total General</label>
                                <label>@totalGeneralVenta.ToString("N2") PYG</label>
                            </div>

                            <div class="form-group">
                                <label>Vuelto</label>
                                <label>@vuelto.ToString("N2") PYG</label>
                            </div>
                        </div>
                    </div>

                    <br>
                        @if (vuelto!=null && vuelto>=0)
                        {
                            <button class="btn btn-primary" @onclick="FinalizarVenta">Finalizar</button>
                        }



                </div>

            </div>
        </div>
        }

</div>


</div>

@code {
    // Propiedades
    [Inject]
    private HttpClient http { get; set; }
    [Inject] NavigationManager navigation { get; set; }
    private decimal valorPago =0;
    private string codigoBarras;
    private List<CreateDetalleVentaDTO> productosEncontrados;
    private List< SharedProject.Models.Producto> productosReales;
    private bool codigoBarrasEncontrado;
    private bool productoEncontradoEncontrado;
    ClienteViewDTO clienteSeleccionado = new ClienteViewDTO();
    string documentoBusqueda = "";


    List<ClienteViewDTO> listaClientes = new List<ClienteViewDTO>
    {

    };

    List<NumeracionComprobante> listaComprobantes = new List<NumeracionComprobante>
    {
    };

    int comprobanteSeleccionado = 1;

    async Task FinalizarVenta()
    {
        if(comprobanteSeleccionado==null || comprobanteSeleccionado == 0)
        {
            await ShowError("Seleccione un comprobante", "");
        }
        else
        {

            var venta = new CreateVentaDTO()
            { ClienteId = clienteSeleccionado.Id,
                ComprobanteId = comprobanteSeleccionado,
                DetallesVenta = productosEncontrados,
                Estado = true,
                Fecha = DateTime.Now,
                TotalCompra = totalGeneralVenta

            };

            VentaViewDTO ven = new VentaViewDTO() { Id=0};
            var data = await http.PostAsJsonAsync($"{SharedProject.Api.url}/Venta",venta);

            if (data.IsSuccessStatusCode)
            {
                // Lee el contenido de la respuesta como una cadena de texto
                string content = await data.Content.ReadAsStringAsync();

                // Deserializa el contenido en un objeto utilizando JsonSerializer
                ven = JsonConvert.DeserializeObject<VentaViewDTO>(content);

                // Ahora puedes trabajar con el objeto deserializado
                // ...
            }
            if (ven.Id != 0)
                navigation.NavigateTo($"/comprobante/imprimir/{ven.Id}");
            else
                await ShowError("No fue posible registrar la venta", "");

        }
    }

    async void BuscarCliente()
    {
        clienteSeleccionado = await GetCliente(documentoBusqueda);

        if (clienteSeleccionado == null)
        {
            clienteSeleccionado = await GetCliente("000");
        }

        documentoBusqueda = "";
        await js.InvokeVoidAsync("eval", "document.getElementById('codigoBarrasInput').focus();");
    }

    // Clase CreateDetalleVentaDTO

    public decimal vuelto = 0;
    private decimal totalGeneralVenta;
    private decimal TotalIVa;

    private void CalcularVuelto()
    {
        if (valorPago != null && valorPago >= 0)
        {
            vuelto = valorPago - totalGeneralVenta;
        }
        else
        {
            vuelto = 0;
        }
    }

    public async Task <SharedProject.Models.Producto> GetByBarCode(string barCode)
    {
        try
        {

            var result = await http.GetFromJsonAsync<SharedProject.Models.Producto>($"{SharedProject.Api.url}/Producto/barCode/{barCode}");
            return result;
        }
        catch (Exception rx)
        {

            return null;
        }

    }

    public async Task<SharedProject.DTOs.ClienteViewDTO> GetCliente(string documento)
    {
        try
        {

            return await http.GetFromJsonAsync<SharedProject.DTOs.ClienteViewDTO>($"{SharedProject.Api.url}/Clientes/DOcumento/{documento}");

        }
        catch (Exception rx)
        {

            return null;
        }

    }

    public async Task<SharedProject.Models.NumeracionComprobante> GetComprobante(int documento)
    {
        try
        {

            return await http.GetFromJsonAsync<SharedProject.Models.NumeracionComprobante>($"{SharedProject.Api.url}/NumeracionComprobante/{documento}");

        }
        catch (Exception rx)
        {

            return null;
        }

    }


    // Método adicional para calcular el total general de la venta y el total de IVA
    private void CalcularTotales()
    {
        totalGeneralVenta = productosEncontrados?.Sum(p => p.TotalVenta) ?? 0;
        TotalIVa = productosEncontrados?.Sum(p =>p.TotalIVa) ?? 0;
    }

    private void HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            CalcularVuelto();
        }
    }
    private void HandleKeyDownCliente(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            BuscarCliente();
        }
    }

    private void ActualizarCampo(ChangeEventArgs e)
    {
        codigoBarras = e.Value.ToString();
    }
    private void ActualizarCampoCliente(ChangeEventArgs e)
    {
        documentoBusqueda = e.Value.ToString();
    }
    private void ActualizarCampoPago(ChangeEventArgs e)
    {
        decimal.TryParse(e.Value.ToString(), out valorPago);

    }
    private decimal GetTotalSinIVa(decimal iva, decimal total) => total - iva;

    private async Task<bool> VerficiarCantidad(int cantidad,string barCode)
    {
        try
        {
            var result= await http.GetFromJsonAsync<Boolean>($"{SharedProject.Api.url}/Producto/Consultar/{barCode}/{cantidad}");
            return result;
        }
        catch (Exception)
        {
            return false;
        }


    }

    // Método de búsqueda
    private async Task Buscar()
    {
        try
        {
            if (!string.IsNullOrWhiteSpace(codigoBarras) && !string.IsNullOrEmpty(codigoBarras))
            {
                var productoExistente = productosEncontrados?.FirstOrDefault(p => p.CodigoBarras == codigoBarras);
                if (productoExistente != null)
                {
                    if (await VerficiarCantidad(Convert.ToInt32(productoExistente.Cantidad + 1), codigoBarras))
                    {
                        productoExistente.Cantidad++;
                        productoExistente.TotalVenta = CalcularTotal(productoExistente.Cantidad, productoExistente.PrecioVenta);
                        productoExistente.TotalCompra = CalcularTotal(productoExistente.Cantidad, productoExistente.PrecioCompra);
                        productoExistente.TotalIVa = CalcularTotalIVa(productoExistente.TotalVenta, 10);
                        CalcularTotales();

                    }
                    else
                    {
                        await ShowError("La cantidad supera el stock actual", "");
                    }
                }
                else
                {
                    var producto = await GetByBarCode(codigoBarras);
                    if (producto != null)
                    {
                        var detalleVenta = new CreateDetalleVentaDTO
                            {
                                Id = producto.Id,
                                VentaId = 0,
                                ProductoId = producto.Id,
                                CodigoBarras = producto.CodigoBarras,
                                Descripcion = producto.Descripcion,
                                PrecioVenta = producto.PrecioVenta,
                                PrecioCompra = producto.PrecioCompra,
                                Cantidad = 1,
                                Descuento = 0,
                                TotalIVa = CalcularTotalIVa(producto.PrecioVenta, 10),
                                IvaPorcent = 10,
                                TotalVenta = CalcularTotal(1, producto.PrecioVenta),
                                TotalCompra = CalcularTotal(1, producto.PrecioCompra)
                            };

                        productosEncontrados.Add(detalleVenta);
                        codigoBarrasEncontrado = true;
                        productoEncontradoEncontrado = true;
                        CalcularTotales();
                    }
                    else
                    {
                        await ShowError("El producto no fue encontrado.", "Error");
                    }
                }


            }
            // Limpiar el campo de búsqueda y mantener el enfoque
            codigoBarras = string.Empty;

            CalcularVuelto();
        }
        catch (Exception)
        {


        }
        // Aquí realizarías la lógica de búsqueda y asignarías los productos encontrados a la lista productosEncontrados
        // ...

        // Ejemplo de asignación de valores


        await js.InvokeVoidAsync("eval", "document.getElementById('codigoBarrasInput').focus();");
    }

    // Método para sumar la cantidad
    private async Task SumarCantidad(CreateDetalleVentaDTO producto)
    {
        if (await VerficiarCantidad(Convert.ToInt32(producto.Cantidad + 1), producto.CodigoBarras))
        {
            producto.Cantidad++;
            producto.TotalVenta = CalcularTotal(producto.Cantidad, producto.PrecioVenta);
            producto.TotalCompra = CalcularTotal(producto.Cantidad, producto.PrecioCompra);
            producto.TotalIVa = CalcularTotalIVa(producto.TotalVenta, 10);
            CalcularTotales();
        }
        else await ShowError("La cantidad supera el stock actual", "");


    }

    // Método para restar la cantidad
    private  void RestarCantidad(CreateDetalleVentaDTO producto)
    {
        if (producto.Cantidad > 1)
        {
            producto.Cantidad--;
            producto.TotalVenta = CalcularTotal(producto.Cantidad,producto.PrecioVenta);
            producto.TotalCompra = CalcularTotal(producto.Cantidad, producto.PrecioCompra);
            producto.TotalIVa = CalcularTotalIVa(producto.TotalVenta,10);
        }
        else
        {
            EliminarProducto(producto.CodigoBarras);
        }
        CalcularTotales();
    }

    // Método para calcular el total de venta
    private decimal CalcularTotal(decimal cantidad, decimal precio)
    {
        return precio*cantidad;
    }

    // Método para calcular el total de compra


    // Método para calcular el total de IVA
    private decimal CalcularTotalIVa(decimal total,int ivaPorcent)
    {

        return (ivaPorcent * total) / 100;
    }

    // Método para eliminar un producto de la lista
    private void EliminarProducto(string codigoBarras)
    {
        var item = productosEncontrados.Find(x => x.CodigoBarras == codigoBarras);
        productosEncontrados.Remove(item);
        CalcularTotales();
    }

    // Función para mostrar alertas de error
    private async Task ShowError(string mensaje, string titulo)
    {
        await new Utils.Functions(js, swl).ShowError(mensaje, titulo);
    }


    // Método que se llama al iniciar el componente
    protected override async void OnInitialized()
    {

        try
        {
            productosEncontrados = new List<CreateDetalleVentaDTO>();
            codigoBarras = string.Empty;
            CalcularTotales();
            listaComprobantes = await http.GetFromJsonAsync<List<SharedProject.Models.NumeracionComprobante>>($"{SharedProject.Api.url}/NumeracionComprobante");
            listaClientes = await http.GetFromJsonAsync<List<SharedProject.DTOs.ClienteViewDTO>>($"{SharedProject.Api.url}/Clientes");

            if (clienteSeleccionado != null)
                clienteSeleccionado = listaClientes.FirstOrDefault(x => x.DatosGenerales.Nombre == "Default");
            if (listaComprobantes != null)
                comprobanteSeleccionado = listaComprobantes.FirstOrDefault().Id;
        }
        catch (Exception)
        {


        }


    }


    //Modal code

    private Components.Modals.ConfirmationModal confirmationModal;
    ClienteViewDTO[] Clientes { get; set; }


    string txt = "";
    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadCliente();
        }
        catch (Exception)
        {


        }

    }
    async Task LoadCliente()
    {
        Clientes = await http.GetFromJsonAsync<ClienteViewDTO[]>($"{SharedProject.Api.url}/Clientes");
    }
    async Task Delete(int id)
    {
        var Cliente = Clientes.FirstOrDefault(x => x.Id == id);
        if (await new Utils.Functions(js, swl).ShowConfirmation("Deseas eliminar el registro?", "Confirmar"))
        {
            var response = await http.DeleteAsync($"{SharedProject.Api.url}/Clientes/{id}");
            if (response.StatusCode == System.Net.HttpStatusCode.NoContent)
                await LoadCliente();
            else
                await new Utils.Functions(js, swl).ShowError("No fue posible eliminar el registro", "Error");

        }

    }

    private async void SearchKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await Buscar(txt);
        }
    }

    async Task Buscar(string txt)
    {
        if (string.IsNullOrEmpty(txt) || string.IsNullOrWhiteSpace(txt))
            await LoadCliente();
        else
        {
            var a = await http.GetFromJsonAsync<IEnumerable<ClienteViewDTO>>($"{SharedProject.Api.url}/Clientes/filter/{txt}");
            Clientes = a.ToArray();
        }

    }

    private bool showModal = false;
    private string[] names = { "Nombre 1", "Nombre 2", "Nombre 3" };

    private void ShowNameList()
    {
        showModal = true;
    }

    private void HideModal()
    {
        showModal = false;
    }

    private async Task SelectName(ClienteViewDTO cliente)
    {
        clienteSeleccionado = cliente;
        showModal = false;
        await Task.CompletedTask;
    }
}

