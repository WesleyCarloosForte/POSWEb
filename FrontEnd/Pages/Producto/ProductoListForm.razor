@page "/Producto/list"
@inject HttpClient http
@inject IJSRuntime js
@using Microsoft.AspNetCore.Components.Forms
@inject SweetAlertService swl;
@inject NavigationManager nav;
@using SharedProject.Models;
<h3>Producto</h3>

<button class="btn btn-primary my-2" @onclick="MostrarProductosSinStock"><i class="fas fa-exclamation-triangle"></i> &nbsp;Bajo stock</button>
<button class="btn btn-info my-2" @onclick="MostrarProductosEnStock"><i class="fas fa-list"></i>&nbsp;Productos en Stock</button>

<div class="input-group my-2 align-items-center">
    <div class="input-group-prepend">
        <span class="input-group-text" style="margin-right: 5px;"><i class="fas fa-search"></i></span>
    </div>
    <input type="text" class="form-contProducto px-2" placeholder="Buscar" @bind="txt" />
    <div class="input-group-append" style="margin-left: 5px;">
        <button class="btn btn-primary ml-2" type="button" @onclick="(()=>Buscar(txt))">Buscar</button>
    </div>
</div>


@if (Producto == null)
{
    <text>Cargando...</text>
}
else if (Producto.Length == 0)
{
    <text>No hay categoris en la base de datos!</text>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th hidden>Id</th>
                <th>Producto</th>
                <th>Codigo de barras</th>
                <th>Categoria</th>
                <th>Stock Actual</th>
                <th>Stock minimo</th>
                <th>Precio de compra</th>
                <th>Precio de venta</th>
                <th>Ganancia</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var producto in Producto)
            {
                <tr>
                    <td hidden>@producto.Id</td>
                    <td>@producto.Descripcion</td>
                    <td>@producto.CodigoBarras</td>
                    <td>@producto.Categoria.Descripcion</td>
                    <td>@string.Format("{0:0.00}", producto.StockActual)</td>
                    <td>@string.Format("{0:0.00}", producto.StockMinimo)</td>
                    <td>@string.Format("{0:0.00}", producto.PrecioCompra)</td>
                    <td>@string.Format("{0:0.00}", producto.PrecioVenta)</td>
                    <td>@string.Format("{0:0.00}",GetGanancia(producto.PrecioCompra, producto.PrecioVenta))</td>
                    <td>
                        <a class="btn btn-success" href="Producto/edit/@producto.Id">
                            <i class="fas fa-edit"></i>
                        </a>
                        <button class="btn btn-danger" @onclick="(() => Delete(producto.Id))">
                            <i class="fas fa-trash-alt"></i>
                        </button>
                        <a class="btn btn-secondary" href="reporte-kardex/@producto.Id">
                            K
                        </a>
                    </td>
                </tr>
            }
        </tbody>
    </table>


}
<FrontEnd.Components.Buttons.ButtonNew Goto="Producto/Create"></FrontEnd.Components.Buttons.ButtonNew>
@code {
    private Components.Modals.ConfirmationModal confirmationModal;
    Producto[] Producto { get; set; }


    string txt = "";
    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadProducto();
        }
        catch (Exception)
        {


        }
        
    }

    void MostrarProductosSinStock()
    {
        nav.NavigateTo("reporte-productos/bajos");


    }

    void MostrarProductosEnStock()
    {
        nav.NavigateTo("reporte-productos");


    }

    async Task LoadProducto()
    {
        Producto = await http.GetFromJsonAsync<Producto[]>($"{SharedProject.Api.url}/Producto");
    }
    async Task Delete(int id)
    {
        if (await new Utils.Functions(js, swl).ShowConfirmation("Deseas eliminar el registro?", "Confirmar"))
        {
            var response = await http.DeleteAsync($"{SharedProject.Api.url}/Producto/{id}");
            if (response.StatusCode == System.Net.HttpStatusCode.NoContent)
                await LoadProducto();
            else
                await new Utils.Functions(js, swl).ShowError("No fue posible eliminar el registro", "Error");

        }

    }

    async Task ViewKardexx(int id)
    {


    }

    private decimal GetGanancia(decimal compra, decimal venta) => venta - compra;

    private async void SearchKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await Buscar(txt);
        }
    }

    async Task Buscar(string txt)
    {
        if (string.IsNullOrEmpty(txt) || string.IsNullOrWhiteSpace(txt))
            await LoadProducto();
        else
        {
            var a = await http.GetFromJsonAsync<IEnumerable<Producto>>($"{SharedProject.Api.url}/Producto/filter/{txt}");
            Producto = a.ToArray();
        }

    }





}
