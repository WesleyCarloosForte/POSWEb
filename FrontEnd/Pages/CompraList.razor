@page "/Compra/list"
@inject HttpClient http
@inject IJSRuntime js
@using Microsoft.AspNetCore.Components.Forms
@inject SweetAlertService swl;
@using SharedProject.DTOs;
<h3>Compras</h3>

<div class="input-group my-2 align-items-center">
    <div class="input-group-prepend">
        <span class="input-group-text" style="margin-right: 5px;"><i class="fas fa-search"></i></span>
    </div>
    <input type="text" class="form-control px-2" placeholder="Buscar" @bind="txt" @onkeydown="SearchKeyPress" />
    <div class="input-group-append" style="margin-left: 5px;">
        <button class="btn btn-primary ml-2" type="button" @onclick="(()=>Buscar(txt))">Buscar</button>
    </div>
</div>


@if (Compras == null)
{
    <text>Cargando...</text>
}
else if (Compras.Length == 0)
{
    <text>No hay compras en la base de datos!</text>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th hidden>Id</th>
                <th>Proveedor</th>
                <th>Fecha</th>
                <th>Nro Comprobante</th>
                <th>Total</th>
                <th>Estado</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var compra in Compras)
            {
                <tr>
                    <td hidden>@compra.Id</td>
                    <td>@compra.Proveedor.DatosGenerales.Nombre</td>
                    <td>@compra.Fecha.ToShortDateString()</td>
                    <td>@compra.NumeroComprobante</td>
                    <td>@string.Format("{0:N2}", compra.TotalCompra)</td>
                    <td>@(compra.Estado == true ? "Activo" : "Anulado")</td>
                    <td>
                        <button class="btn btn-danger" @onclick="(() => Delete(compra.Id))">
                            <i class="fas fa-trash-alt"></i>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}



@code {
    private Components.Modals.ConfirmationModal confirmationModal;
    CompraViewDTO[] Compras { get; set; }

    string txt = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadCompras();
        }
        catch (Exception)
        {
            // Manejo de errores
        }
    }

    async Task LoadCompras()
    {
        var test = await http.GetFromJsonAsync<List<CompraViewDTO>>($"{SharedProject.Api.url}/Compras");
        Compras = test.ToArray();
    }

    async Task Delete(int id)
    {
        if (await new Utils.Functions(js, swl).ShowConfirmation("¿Deseas Anular la compra?", "Confirmar"))
        {
            var response = await http.DeleteAsync($"{SharedProject.Api.url}/Compras/{id}");
            if (response.IsSuccessStatusCode)
                await LoadCompras();
            else
                await new Utils.Functions(js, swl).ShowError("No fue posible anular la compra", "Error");
        }
    }

    private async void SearchKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await Buscar(txt);
        }
    }

    async Task Buscar(string txt)
    {
        if (string.IsNullOrEmpty(txt) || string.IsNullOrWhiteSpace(txt))
            await LoadCompras();
        else
        {
            var a = await http.GetFromJsonAsync<IEnumerable<CompraViewDTO>>($"{SharedProject.Api.url}/Compras/filter/{txt}");
            Compras = a.ToArray();
        }
    }
}
