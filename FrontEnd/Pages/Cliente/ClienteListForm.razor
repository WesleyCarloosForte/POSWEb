@page "/Cliente/list"
@inject HttpClient http
@inject IJSRuntime js
@using Microsoft.AspNetCore.Components.Forms
@inject SweetAlertService swl;
<h3>Cliente</h3>

<div class="input-group my-2 align-items-center">
    <div class="input-group-prepend">
        <span class="input-group-text" style="margin-right: 5px;"><i class="fas fa-search"></i></span>
    </div>
    <input type="text" class="form-contCliente px-2" placeholder="Buscar" @bind="txt" />
    <div class="input-group-append" style="margin-left: 5px;">
        <button class="btn btn-primary ml-2" type="button" @onclick="(()=>Buscar(txt))">Buscar</button>
    </div>
</div>


@if (Clientes == null)
{
    <text>Cargando...</text>
}
else if (Clientes.Length == 0)
{
    <text>No hay categoris en la base de datos!</text>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th hidden>Id</th>
                <th>Nombre</th>
                <th>Documento</th>
                <th>Tipo de Documento</th>
                
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var Cliente in Clientes)
            {
                <tr>
                    <td hidden>@Cliente.Id</td>
                    <td>@Cliente.DatosGenerales.Nombre</td>
                     <td>@Cliente.DatosGenerales.NumeroDocumento</td>
                     <td>@Cliente.DatosGenerales.Documento.Descripcion</td>
                    <td>
                        <a class="btn btn-success" href="Cliente/edit/@Cliente.Id">
                            <i class="fas fa-edit"></i>
                        </a>
                        <button class="btn btn-danger" @onclick="(()=>Delete(Cliente.Id))">
                            <i class="fas fa-trash-alt"></i>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

}
<FrontEnd.Components.Buttons.ButtonNew Goto="Cliente/Create"></FrontEnd.Components.Buttons.ButtonNew>
@code {
    private Components.Modals.ConfirmationModal confirmationModal;
    ClienteViewDTO[] Clientes { get; set; }


    string txt = "";
    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadCliente();
        }
        catch (Exception)
        {


        }
        
    }
    async Task LoadCliente()
    {
        Clientes = await http.GetFromJsonAsync<ClienteViewDTO[]>($"{SharedProject.Api.url}/Clientes");
    }
    async Task Delete(int id)
    {
        var Cliente = Clientes.FirstOrDefault(x => x.Id == id);
        if (await new Utils.Functions(js, swl).ShowConfirmation("Deseas eliminar el registro?", "Confirmar"))
        {
            var response = await http.DeleteAsync($"{SharedProject.Api.url}/Clientes/{id}");
            if (response.StatusCode == System.Net.HttpStatusCode.NoContent)
                await LoadCliente();
            else
                await new Utils.Functions(js, swl).ShowError("No fue posible eliminar el registro", "Error");

        }

    }

    private async void SearchKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await Buscar(txt);
        }
    }

    async Task Buscar(string txt)
    {
        if (string.IsNullOrEmpty(txt) || string.IsNullOrWhiteSpace(txt))
            await LoadCliente();
        else
        {
            var a = await http.GetFromJsonAsync<IEnumerable<ClienteViewDTO>>($"{SharedProject.Api.url}/Clientes/filter/{txt}");
            Clientes = a.ToArray();
        }

    }





}
